import React, { useState, useEffect } from 'react';
import PhoneInput from 'react-phone-input-2';
import 'react-phone-input-2/lib/style.css';
import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { motion, AnimatePresence } from 'framer-motion';

function PopUpContainer({ onCloseButton, source, onClose }) {
  const [customTime, setCustomTime] = useState('');
  const [name, setName] = useState('');
  const [phoneNumber, setPhoneNumber] = useState('');
  const [selectedPackage, setSelectedPackage] = useState('');
  const [timeSelection, setTimeSelection] = useState('–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º');
  const [isImmediateTimeSelected, setIsImmediateTimeSelected] = useState(true);

  const showErrorNotification = () => {
    toast.error('–ü–æ–º–∏–ª–∫–∞! –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Ñ–æ—Ä–º—É.', {
      position: 'top-right',
      autoClose: 5000,
    });
  };

  function getMinDateTime() {
    const now = new Date();
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0'); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –º—ñ—Å—è—Ü—å –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ç–∞ –¥–æ–¥–∞—î–º–æ '0' –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
    const day = String(now.getDate()).padStart(2, '0'); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –¥–µ–Ω—å –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ç–∞ –¥–æ–¥–∞—î–º–æ '0' –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
    const hours = String(now.getHours()).padStart(2, '0'); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–¥–∏–Ω–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ç–∞ –¥–æ–¥–∞—î–º–æ '0' –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
    const minutes = String(now.getMinutes()).padStart(2, '0'); // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Ö–≤–∏–ª–∏–Ω–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É —Ç–∞ –¥–æ–¥–∞—î–º–æ '0' –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ

    // –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É —Ç–∞ —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ, –ø—Ä–∏–π–Ω—è—Ç–æ–º—É –¥–ª—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ min —É input —Ç–∏–ø—É "datetime-local".
    return `${year}-${month}-${day}T${hours}:${minutes}`;
  }

  function formatDate(dateTime) {
    if (!dateTime) {
      return ''; // –ü–æ–≤–µ—Ä—Ç–∞—î –ø—É—Å—Ç–∏–π —Ä—è–¥–æ–∫, —è–∫—â–æ dateTime –Ω–µ –≤–∫–∞–∑–∞–Ω–æ.
    }

    const date = new Date(dateTime);
    const day = date.getDate();
    const month = date.getMonth() + 1; // –î–æ–¥–∞–≤–∞–Ω–Ω—è 1, –æ—Å–∫—ñ–ª—å–∫–∏ –º—ñ—Å—è—Ü—ñ –≤ Date –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ 0.
    const year = date.getFullYear();
    const hours = date.getHours();
    const minutes = date.getMinutes();
    const formattedMinutes = String(minutes).padStart(2, '0');
    // –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ —Ç–∞ —á–∞—Å—É —É –≤–∏–≥–ª—è–¥—ñ "–¥–µ–Ω—å:–º—ñ—Å—è—Ü—å:—Ä—ñ–∫; –≥–æ–¥–∏–Ω–∞:—Ö–≤–∏–ª–∏–Ω–∞".
    return `${day}.${month}.${year}; ${hours}:${formattedMinutes}`;
  }

  const showSuccessNotification = () => {
    toast.success('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', {
      position: 'top-right',
      autoClose: 5000,
    });
  };

  const handleSubmit = async (event) => {
    event.preventDefault();

    if (name && phoneNumber && selectedPackage && (timeSelection !== '–Ü–Ω—à–µ' || customTime)) {
      const formData = `
        üî•–ù–æ–≤–µ –ø–æ–≤i–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Å–∞–π—Ç—É!üî•\n\nüì© –ü–æ–ø-–∞–ø: ${source}\nü§µ‚Äç‚ôÇÔ∏è I–º'—è: ${name}\nüì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +${phoneNumber}\nüìã –ü–∞–∫–µ—Ç –ø–æ—Å–ª—É–≥: ${selectedPackage}\n‚åöÔ∏è –ö–æ–ª–∏ –¥–∑–≤–æ–Ω–∏—Ç–∏: ${
        timeSelection === '–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º' ? timeSelection : formatDate(customTime)
      }
      `.trim();

      try {
        const botToken = '6809113635:AAEAPNVeXhN78oUhxyGEpuahfr1pMTWSLM0';
        const groupId = '-1002050844018';

        const message = encodeURIComponent(formData);
        const url = `https://api.telegram.org/bot${botToken}/sendMessage?chat_id=${groupId}&text=${message}`;

        const response = await fetch(url, {
          method: 'POST',
        });

        if (response.ok) {
          console.log('–î–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—ñ –≤ –≥—Ä—É–ø—É –≤ Telegram.');
          showSuccessNotification();
          resetForm();
        } else {
          showErrorNotification();
          console.log('–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö.', response.status, response.statusText);
        }
      } catch (error) {
        console.error(error);
        alert('–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞.');
        showErrorNotification();
      }
      console.log(formData);
    }
  };
  const resetForm = () => {
    setName('');
    setPhoneNumber('');
    setSelectedPackage('');
    setCustomTime('');
  };

  const popupVariants = {
    hidden: { opacity: 0, y: '100%' },
    visible: { opacity: 1, y: 0 },
  };
  return (
    <AnimatePresence>
      <motion.div
        className={`popUp-wrapper `}
        variants={popupVariants}
        initial="hidden"
        animate="visible"
        exit="hidden">
        {onCloseButton && (
          <svg
            onClick={onCloseButton}
            className="popUp-wrapper--closeButton"
            width="2.5rem"
            height="2.5rem"
            viewBox="0 0 24 24"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            stroke="#BF1616">
            <g id="SVGRepo_bgCarrier" strokeWidth="0"></g>
            <g
              id="SVGRepo_tracerCarrier"
              strokeLinecap="round"
              strokeLinejoin="round"
              stroke="#Bf1616"
              strokeWidth="0.288"></g>
            <g id="SVGRepo_iconCarrier">
              <path
                d="M14.5 9.50002L9.5 14.5M9.49998 9.5L14.5 14.5"
                stroke="#BF1616"
                strokeWidth="1.5"
                strokeLinecap="round"></path>
            </g>{' '}
          </svg>
        )}
        <form onSubmit={handleSubmit} style={{ display: 'contents' }}>
          <label className="popUp-wrapper__label">
            –í–∞—à–µ —ñ–º'—è
            <input
              type="text"
              name="–í–∞—à–µ —ñ–º'—è"
              placeholder="–Ü–º'—è"
              value={name}
              onChange={(e) => setName(e.target.value)}
              autoComplete="off"
              required
            />
          </label>
          <label className="popUp-wrapper__label">
            –í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω
            <PhoneInput
              name="number"
              value={phoneNumber}
              onChange={setPhoneNumber}
              country={'ua'}
              enableSearch
              inputStyle={{
                width: '100%',
                border: '1px solid black',
                borderRadius: '11px',
              }}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä"
              autoComplete="off"
              required
            />
          </label>
          <label className="popUp-wrapper__label">
            –ö–æ–ª–∏ –≤–∞–º –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏?
            <select
              value={timeSelection}
              onChange={(e) => {
                setTimeSelection(e.target.value);
                setIsImmediateTimeSelected(e.target.value === '–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º');
                if (e.target.value === '–Ü–Ω—à–µ') {
                  setCustomTime('');
                }
              }}
              name="–ö–æ–ª–∏ –≤–∞–º –ø–µ—Ä–µ–¥–∑–≤–æ–Ω–∏—Ç–∏?"
              required>
              <option value="–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º">–ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º</option>
              <option value="–Ü–Ω—à–µ">–Ü–Ω—à–µ</option>
            </select>
            {timeSelection === '–Ü–Ω—à–µ' && (
              <input
                type="datetime-local"
                value={customTime}
                onChange={(e) => setCustomTime(e.target.value)}
                style={{ marginTop: '10px', borderRadius: '11px', width: '100%' }}
                autoComplete="off"
                min={getMinDateTime()}
                required
              />
            )}
          </label>
          <p className="popUp-wrapper__text">–Ø–∫–∏–π –ø–∞–∫–µ—Ç –ø–æ—Å–ª—É–≥ –í–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?</p>
          <label className="popUp-wrapper__radio-label">
            <input
              type="radio"
              name="–ü–∞–∫–µ—Ç –ø–æ—Å–ª—É–≥"
              value="–ê–≤—Ç–æ—Ä—Å—å–∫–∏–π –ø—Ä–æ—î–∫—Ç"
              onChange={(e) => setSelectedPackage(e.target.value)}
              style={{}}
              required
            />
            –ê–≤—Ç–æ—Ä—Å—å–∫–∏–π –ø—Ä–æ—î–∫—Ç
          </label>
          <label className="popUp-wrapper__radio-label">
            <input
              type="radio"
              name="–ü–∞–∫–µ—Ç –ø–æ—Å–ª—É–≥"
              value="–ú—ñ–Ω—ñ-–ø—Ä–æ—î–∫—Ç"
              onChange={(e) => setSelectedPackage(e.target.value)}
              style={{}}
              required
            />
            –ú—ñ–Ω—ñ-–ø—Ä–æ—î–∫—Ç
          </label>
          <button className="popUp-wrapper__button" type="submit">
            –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
          </button>
        </form>
      </motion.div>
    </AnimatePresence>
  );
}

export default PopUpContainer;
